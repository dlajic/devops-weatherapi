stages:
  - deploy
  - lint
  - test
  - build
  - compose-test


variables:
  PYTHONPATH: "$CI_PROJECT_DIR/fastapi-service/app"

lint:
  stage: lint
  image: python:3.11
  script:
    - pip install ruff
    - ruff check fastapi-service/app

test:
  stage: test
  image: python:3.11
  variables:
    PYTHONPATH: fastapi-service
  script:
    - pip install -r fastapi-service/requirements.txt
    - pip install pytest-cov
    - pytest --cov=fastapi-service/app --cov-report=term-missing --cov-fail-under=90
  coverage: '/^TOTAL.*?(\d+\%)$/'
  rules:
    - changes:
        - fastapi-service/**


build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t weather-backend ./fastapi-service
    - docker build -t weather-frontend ./frontend
    - docker build -t weather-airflow -f airflow/Dockerfile .

compose-test:
  stage: compose-test
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - apk add --no-cache curl
    - docker compose version
    - docker compose -f docker-compose.yml up -d --build
    - sleep 15
    - docker compose ps
    - docker compose logs backend

    # Backend Healthcheck
    - docker exec fastapi-backend curl http://localhost:8000/health

    # DAG-Struktur prüfen

    - echo "== Prüfe auf DAG Import-Fehler =="
    - docker exec airflow-webserver airflow dags list-import-errors

    - echo "== Prüfe, ob weather_dag vorhanden ist =="
    - docker exec airflow-webserver airflow dags list | grep weather_dag || (echo "❌ weather_dag nicht gefunden!" && exit 1)

    - docker compose down

deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client docker-cli dos2unix
    - mkdir -p ~/.ssh
    - 'test -f "$SSH_PRIVATE_KEY" || { echo "❌ SSH_PRIVATE_KEY file var fehlt!"; exit 1; }'
    - echo "Key size (bytes): $(wc -c < "$SSH_PRIVATE_KEY")"
    - head -n1 "$SSH_PRIVATE_KEY"
    - cp "$SSH_PRIVATE_KEY" ~/.ssh/id_rsa
    - dos2unix ~/.ssh/id_rsa || true
    - chmod 600 ~/.ssh/id_rsa
    - 'ssh-keygen -y -f ~/.ssh/id_rsa >/dev/null || { echo "❌ Private Key unparseable"; exit 1; }'
    - echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh -o StrictHostKeyChecking=yes -o BatchMode=yes -o IdentitiesOnly=yes -i ~/.ssh/id_rsa ubuntu@$AWS_IP "echo 'SSH OK'"
  script:
    - ssh -o IdentitiesOnly=yes -i ~/.ssh/id_rsa ubuntu@$AWS_IP "
        cd ~/devops-weatherapi &&
        git pull &&
        docker compose up -d --build
      "
  only:
    - main