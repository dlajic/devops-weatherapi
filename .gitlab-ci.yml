stages:
  - lint
  - test
  - build
  - compose-test

variables:
  PYTHONPATH: "$CI_PROJECT_DIR/fastapi-service/app"

lint:
  stage: lint
  image: python:3.11
  script:
    - pip install ruff
    - ruff check fastapi-service/app

test:
  stage: test
  image: python:3.11
  variables:
    PYTHONPATH: fastapi-service
  script:
    - pip install -r fastapi-service/requirements.txt
    - pytest fastapi-service/app/tests
  rules:
    - changes:
        - fastapi-service/**

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t weather-backend ./fastapi-service
    - docker build -t weather-frontend ./frontend
    - docker build -t weather-airflow -f airflow/Dockerfile .

compose-test:
  stage: compose-test
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - apk add --no-cache curl
    - docker compose version
    - docker compose -f docker-compose.yml up -d --build
    - sleep 15
    - docker compose ps
    - docker compose logs backend

    # Backend Healthcheck
    - docker exec fastapi-backend curl http://localhost:8000/health

    # DAG-Struktur prüfen

    - echo "== Prüfe auf DAG Import-Fehler =="
    - docker exec airflow-webserver airflow dags list-import-errors

    - echo "== Prüfe, ob weather_dag vorhanden ist =="
    - docker exec airflow-webserver airflow dags list | grep weather_dag || (echo "❌ weather_dag nicht gefunden!" && exit 1)

    - docker compose down